package dp;

import java.util.*;

public class boj9095 {

    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();

        for(int i = 0 ; i < n; i++){
            int m = sc.nextInt();

            int[] dp = new int[m+1];
            if (m >= 1) dp[1] = 1;
            if (m >= 2) dp[2] = 2;
            if (m >= 3) dp[3] = 4;


            for(int j = 4; j <= m; j++){
                dp[j] = dp[j-1] + dp[j-2] + dp[j-3];
            }

            System.out.println(dp[m]);
        }
    }
}
/*
어떤 수 n를 1,2,3의 합으로 나타내는 방법
dp[1] => 1 ;; 1가지
dp[2] = 1+1, 2 ;; 2가지
dp[3] = 1+1+1, 2+1, 1+2, 3 ;; 4가지
6을 1,2,3의 전으로 봐보자

만약 5라면 5 + 1밖에 없으니 i-1과 i는 같다.
만약 4라면 4 + 2이고 2를 (1,2,3)으로 나타내는 방법은 1 + 1, 2 이렇게 해서 2가지가 있다.
근데 1 + 1에서 1을 더하는 순간 첫 방법과 같아지므로 2만 고려하면 된다.
만약 3이라면 3 + 3이고, 3을 (1,2,3)으로 나타내는 방법은
1 + 1 + 1
1 + 2
2 + 1
3
이렇게 4가지 방법이 존재한다.
근데4가지 방법 중 앞의 3개는 결국 같은논리이므로, 마지막만 고려하면 됨
그럼
dp[i] = dp[i-1] + dp[i-2] + dp[i-3]일까?

dp[4] = dp[1] + dp[2] + dp[3] = 1 + 2 + 4?

dp[5] = 2 + 4 + 7 = 13?

1만 사용: 11111
2만 사용:
3만 사용:
12만 사용: 1112, 1121, 1211, 2111, 122, 212, 211
23만 사용: 23, 32
13만 사용: 113, 131, 311
123 모두 사용

1 2 4 7 13 24 44


 */